import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import unicodedata
import re

class NonStandardCharHighlighter:
    def __init__(self, root):
        self.root = root
        self.root.title("–ë–ª–æ–∫–Ω–æ—Ç —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        self.root.geometry("900x700")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        self.define_standard_chars()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        self.setup_highlight_tags()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        self.create_menu()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.create_toolbar()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        self.create_text_widget()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.create_context_menu()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.create_info_panel()
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.bind_events()
    
    def define_standard_chars(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        self.standard_chars = set()
        
        # –û–±—ã—á–Ω—ã–µ ASCII —Å–∏–º–≤–æ–ª—ã (32-126)
        for i in range(32, 127):
            self.standard_chars.add(chr(i))
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
        self.standard_chars.update(['\n', '\t', '\r'])
        
        # –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        for i in range(0x0400, 0x04FF + 1):
            try:
                char = chr(i)
                if unicodedata.category(char) in ['Lu', 'Ll', 'Lo']:  # –ë—É–∫–≤—ã
                    self.standard_chars.add(char)
            except:
                pass
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        additional_cyrillic = "—ë–Å”ô“ì“õ“£”©“±“Ø“ª–Ü—ñ"
        self.standard_chars.update(additional_cyrillic)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ —Å–∏–º–≤–æ–ª—ã
        punctuation = ".,;:!?()[]{}\"'¬´¬ª‚Äî‚Äì-+=*/#@$%^&|\\`~‚Ññ"
        self.standard_chars.update(punctuation)
        
        # –¶–∏—Ñ—Ä—ã –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        digits_math = "0123456789<>‚â§‚â•‚â†¬±√ó√∑‚àö‚àû"
        self.standard_chars.update(digits_math)
    
    def setup_highlight_tags(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤"""
        # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è text_widget
        pass
    
    def create_menu(self):
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ù–æ–≤—ã–π", command=self.new_file, accelerator="Ctrl+N")
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å", command=self.open_file, accelerator="Ctrl+O")
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_file, accelerator="Ctrl+S")
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –ú–µ–Ω—é "–ü—Ä–∞–≤–∫–∞"
        edit_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü—Ä–∞–≤–∫–∞", menu=edit_menu)
        edit_menu.add_command(label="–ù–∞–π—Ç–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", command=self.highlight_all)
        edit_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É", command=self.clear_highlights)
        edit_menu.add_separator()
        edit_menu.add_command(label="–ó–∞–º–µ–Ω–∏—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã", command=self.replace_spaces)
        edit_menu.add_command(label="–ó–∞–º–µ–Ω–∏—Ç—å –í–°–ï –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", command=self.replace_all_suspicious)
        
        # –ú–µ–Ω—é "–°–ø—Ä–∞–≤–∫–∞"
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
    
    def create_toolbar(self):
        toolbar = ttk.Frame(self.root)
        toolbar.pack(side=tk.TOP, fill=tk.X, padx=5, pady=2)
        
        ttk.Button(toolbar, text="–ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å", command=self.highlight_all).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_highlights).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="–ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã", command=self.replace_spaces).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="–ò—Å–ø—Ä–∞–≤–∏—Ç—å –í–°–ï", command=self.replace_all_suspicious).pack(side=tk.LEFT, padx=2)
        
        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å–≤–µ—Ç–∫–∏
        self.auto_highlight = tk.BooleanVar(value=True)
        ttk.Checkbutton(toolbar, text="–ê–≤—Ç–æ–ø–æ–¥—Å–≤–µ—Ç–∫–∞", variable=self.auto_highlight).pack(side=tk.LEFT, padx=10)
    
    def create_text_widget(self):
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        text_frame = ttk.Frame(self.root)
        text_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.text_widget = scrolledtext.ScrolledText(
            text_frame, 
            wrap=tk.WORD, 
            font=("Consolas", 12),
            undo=True
        )
        self.text_widget.pack(fill=tk.BOTH, expand=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
        self.setup_highlight_tags_real()
    
    def setup_highlight_tags_real(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤"""
        # –ù–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã - –∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
        self.text_widget.tag_config("invisible", background="#ffcccc", relief="raised")
        
        # –ü–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã - –∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
        self.text_widget.tag_config("similar", background="#ffffcc", relief="raised")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã - –≥–æ–ª—É–±–æ–π —Ñ–æ–Ω
        self.text_widget.tag_config("space", background="#ccffff", relief="raised")
        
        # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã - —Ä–æ–∑–æ–≤—ã–π —Ñ–æ–Ω
        self.text_widget.tag_config("control", background="#ffccff", relief="raised")
    
    def create_context_menu(self):
        """–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏"""
        self.context_menu = tk.Menu(self.root, tearoff=0)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.context_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=self.cut_text, accelerator="Ctrl+X")
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_text, accelerator="Ctrl+C")
        self.context_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_text, accelerator="Ctrl+V")
        self.context_menu.add_separator()
        
        # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        self.context_menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ", command=self.select_all_text, accelerator="Ctrl+A")
        self.context_menu.add_separator()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        self.context_menu.add_command(label="üîç –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", command=self.highlight_all)
        self.context_menu.add_command(label="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É", command=self.clear_highlights)
        self.context_menu.add_separator()
        
        # –§—É–Ω–∫—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.context_menu.add_command(label="üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –í–°–ï –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", command=self.replace_all_suspicious)
        self.context_menu.add_command(label="üìè –ó–∞–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã", command=self.replace_spaces)
        self.context_menu.add_separator()
        
        # –ê–Ω–∞–ª–∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.context_menu.add_command(label="üìä –ê–Ω–∞–ª–∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞", command=self.analyze_selection)
        self.context_menu.add_command(label="üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ", command=self.fix_selection)
    
    def create_info_panel(self):
        info_frame = ttk.Frame(self.root)
        info_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=5, pady=5)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤")
        self.status_label = ttk.Label(info_frame, textvariable=self.status_var)
        self.status_label.pack(side=tk.LEFT)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–º–≤–æ–ª–µ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        self.char_info_var = tk.StringVar(value="")
        self.char_info_label = ttk.Label(info_frame, textvariable=self.char_info_var)
        self.char_info_label.pack(side=tk.RIGHT)
    
    def bind_events(self):
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è"""
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.root.bind('<Control-n>', lambda e: self.new_file())
        self.root.bind('<Control-o>', lambda e: self.open_file())
        self.root.bind('<Control-s>', lambda e: self.save_file())
        
        # –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        self.text_widget.bind('<KeyRelease>', self.on_text_change)
        self.text_widget.bind('<Button-1>', self.on_cursor_move)
        self.text_widget.bind('<ButtonRelease-1>', self.on_cursor_move)
        self.text_widget.bind('<Key>', self.on_cursor_move)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.text_widget.bind('<Button-3>', self.show_context_menu)  # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.root.bind('<Control-x>', lambda e: self.cut_text())
        self.root.bind('<Control-c>', lambda e: self.copy_text())
        self.root.bind('<Control-v>', lambda e: self.paste_text())
        self.root.bind('<Control-a>', lambda e: self.select_all_text())
    
    def on_text_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        if self.auto_highlight.get():
            self.root.after(100, self.highlight_all)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.update_char_info()
    
    def on_cursor_move(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞"""
        self.root.after(10, self.update_char_info)
    
    def update_char_info(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º"""
        try:
            cursor_pos = self.text_widget.index(tk.INSERT)
            char = self.text_widget.get(cursor_pos)
            
            if char:
                char_info = self.get_char_info(char)
                self.char_info_var.set(char_info)
            else:
                self.char_info_var.set("")
        except:
            self.char_info_var.set("")
    
    def get_char_info(self, char):
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ"""
        try:
            unicode_point = ord(char)
            unicode_name = unicodedata.name(char, f"U+{unicode_point:04X}")
            category = unicodedata.category(char)
            
            info = f"'{char}' U+{unicode_point:04X} ({unicode_name}) [{category}]"
            
            if char not in self.standard_chars:
                info += " [–ù–ï–°–¢–ê–ù–î–ê–†–¢–ù–´–ô]"
            
            return info
        except:
            return ""
    
    def highlight_all(self):
        """–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
        self.clear_highlights()
        
        text = self.text_widget.get("1.0", tk.END)
        non_standard_count = 0
        
        for i, char in enumerate(text):
            if char not in self.standard_chars and char != '\n':  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏–º–≤–æ–ª –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞
                line_col = f"1.0+{i}c"
                end_pos = f"1.0+{i+1}c"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–º–≤–æ–ª–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
                if self.is_invisible_char(char):
                    self.text_widget.tag_add("invisible", line_col, end_pos)
                elif self.is_special_space(char):
                    self.text_widget.tag_add("space", line_col, end_pos)
                elif self.is_similar_char(char):
                    self.text_widget.tag_add("similar", line_col, end_pos)
                else:
                    self.text_widget.tag_add("control", line_col, end_pos)
                
                non_standard_count += 1
        
        self.status_var.set(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {non_standard_count}")
    
    def clear_highlights(self):
        """–û—á–∏—â–∞–µ–º –≤—Å—é –ø–æ–¥—Å–≤–µ—Ç–∫—É"""
        for tag in ["invisible", "similar", "space", "control"]:
            self.text_widget.tag_remove(tag, "1.0", tk.END)
        self.status_var.set("–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –æ—á–∏—â–µ–Ω–∞")
    
    def replace_spaces(self):
        """–ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ"""
        text = self.text_widget.get("1.0", tk.END)
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤–∏–¥—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
        space_chars = [
            '\u00a0', '\u2000', '\u2001', '\u2002', '\u2003', '\u2004', '\u2005',
            '\u2006', '\u2007', '\u2008', '\u2009', '\u200a', '\u202f', '\u205f', '\u3000'
        ]
        
        original_text = text
        for space_char in space_chars:
            text = text.replace(space_char, ' ')
        
        if text != original_text:
            self.text_widget.delete("1.0", tk.END)
            self.text_widget.insert("1.0", text)
            self.status_var.set("–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ")
            if self.auto_highlight.get():
                self.highlight_all()
        else:
            self.status_var.set("–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def replace_all_suspicious(self):
        """–ó–∞–º–µ–Ω—è–µ–º –í–°–ï –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏"""
        text = self.text_widget.get("1.0", tk.END)
        original_text = text
        replacements_count = 0
        
        # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        similar_replacements = {
            # –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
            '–∞': 'a', '–µ': 'e', '–æ': 'o', '—Ä': 'p', '—Å': 'c', '—É': 'y', '—Ö': 'x',
            '–ê': 'A', '–í': 'B', '–ï': 'E', '–ö': 'K', '–ú': 'M', '–ù': 'H', '–û': 'O', 
            '–†': 'P', '–°': 'C', '–¢': 'T', '–£': 'Y', '–•': 'X',
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏ —Ç–∏—Ä–µ
            '"': '"', '"': '"', ''': "'", ''': "'", '‚Äö': ',', '‚Äû': '"',
            '‚Äπ': '<', '‚Ä∫': '>', '¬´': '"', '¬ª': '"',
            '‚Äî': '-', '‚Äì': '-', '‚àí': '-', '‚Äí': '-', '‚Äï': '-',
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            '‚Ä¶': '...', '‚Ññ': 'No.', '¬ß': 'S', '¬∂': 'P',
            '¬©': '(c)', '¬Æ': '(r)', '‚Ñ¢': '(tm)', '‚Ñ†': '(sm)',
            '¬∞': 'deg', '¬±': '+/-', '√ó': 'x', '√∑': '/', '¬∑': '*',
            '‚Ä∞': '%', '‚Ä±': '%', '‚ÑÉ': 'C', '‚Ñâ': 'F',
            
            # –î—Ä–æ–±–∏
            '¬Ω': '1/2', '‚Öì': '1/3', '¬º': '1/4', '¬æ': '3/4', '‚Öï': '1/5',
            '‚Öñ': '2/5', '‚Öó': '3/5', '‚Öò': '4/5', '‚Öô': '1/6', '‚Öö': '5/6',
            '‚Öõ': '1/8', '‚Öú': '3/8', '‚Öù': '5/8', '‚Öû': '7/8', '‚Öê': '1/7',
            '‚Öë': '1/9', '‚Öí': '1/10',
            
            # –ù–∞–¥—Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç—Ä–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
            '‚Å∞': '0', '¬π': '1', '¬≤': '2', '¬≥': '3', '‚Å¥': '4', '‚Åµ': '5',
            '‚Å∂': '6', '‚Å∑': '7', '‚Å∏': '8', '‚Åπ': '9',
            '‚ÇÄ': '0', '‚ÇÅ': '1', '‚ÇÇ': '2', '‚ÇÉ': '3', '‚ÇÑ': '4', '‚ÇÖ': '5',
            '‚ÇÜ': '6', '‚Çá': '7', '‚Çà': '8', '‚Çâ': '9',
            
            # –°—Ç—Ä–µ–ª–∫–∏
            '‚Üí': '->', '‚Üê': '<-', '‚Üë': '^', '‚Üì': 'v', '‚Üï': '<->',
            '‚áí': '=>', '‚áê': '<=', '‚Üî': '<->', '‚áî': '<=>', 
            '‚üµ': '<-', '‚ü∂': '->', '‚ü∑': '<->', '‚ü∏': '<=', '‚üπ': '=>',
            '‚Üó': '^>', '‚Üò': 'v>', '‚Üô': '<v', '‚Üñ': '<^',
            '‚û°': '->', '‚¨Ö': '<-', '‚¨Ü': '^', '‚¨á': 'v',
            
            # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            '‚â§': '<=', '‚â•': '>=', '‚â†': '!=', '‚âà': '~=', '‚â°': '===',
            '‚àû': 'inf', '‚àö': 'sqrt', '‚àë': 'sum', '‚àè': 'prod',
            '‚à´': 'integral', '‚àÇ': 'd', '‚àÜ': 'delta', '‚àá': 'nabla',
            '‚àà': 'in', '‚àâ': 'not in', '‚àã': 'contains', '‚äÇ': 'subset',
            '‚äÉ': 'superset', '‚äÜ': 'subseteq', '‚äá': 'superseteq',
            '‚à™': 'union', '‚à©': 'intersect', '‚àÖ': 'empty',
            '‚äï': 'xor', '‚äó': 'tensor', '‚äô': 'dot',
            '‚àß': 'and', '‚à®': 'or', '¬¨': 'not', '‚àÄ': 'forall', '‚àÉ': 'exists',
            
            # –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã
            'Œ±': 'alpha', 'Œ≤': 'beta', 'Œ≥': 'gamma', 'Œ¥': 'delta', 'Œµ': 'epsilon',
            'Œ∂': 'zeta', 'Œ∑': 'eta', 'Œ∏': 'theta', 'Œπ': 'iota', 'Œ∫': 'kappa',
            'Œª': 'lambda', 'Œº': 'mu', 'ŒΩ': 'nu', 'Œæ': 'xi', 'Œø': 'omicron',
            'œÄ': 'pi', 'œÅ': 'rho', 'œÉ': 'sigma', 'œÑ': 'tau', 'œÖ': 'upsilon',
            'œÜ': 'phi', 'œá': 'chi', 'œà': 'psi', 'œâ': 'omega',
            'Œë': 'Alpha', 'Œí': 'Beta', 'Œì': 'Gamma', 'Œî': 'Delta', 'Œï': 'Epsilon',
            'Œñ': 'Zeta', 'Œó': 'Eta', 'Œò': 'Theta', 'Œô': 'Iota', 'Œö': 'Kappa',
            'Œõ': 'Lambda', 'Œú': 'Mu', 'Œù': 'Nu', 'Œû': 'Xi', 'Œü': 'Omicron',
            'Œ†': 'Pi', 'Œ°': 'Rho', 'Œ£': 'Sigma', 'Œ§': 'Tau', 'Œ•': 'Upsilon',
            'Œ¶': 'Phi', 'Œß': 'Chi', 'Œ®': 'Psi', 'Œ©': 'Omega',
            
            # –°–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç
            '‚Ç¨': 'EUR', '¬£': 'GBP', '¬•': 'JPY', '¬¢': 'cent', '‚ÇΩ': 'RUB',
            '‚Ç¥': 'UAH', '‚Ç®': 'Rs', '‚Çπ': 'Rs', '‚Ç©': 'Won', '‚Ç™': 'NIS',
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            '‚òë': '[x]', '‚òê': '[ ]', '‚úì': 'v', '‚úó': 'x', '‚úò': 'x',
            '‚òÖ': '*', '‚òÜ': '*', '‚ô¶': 'diamond', '‚ô†': 'spade',
            '‚ô£': 'club', '‚ô•': 'heart', '‚ô™': 'note', '‚ô´': 'notes',
            '‚Ä†': '+', '‚Ä°': '++', '‚Ä¢': '*', '‚ó¶': 'o', '‚Ä£': '>',
            '‚ñ™': '*', '‚ñ´': 'o', '‚ñ≤': '^', '‚ñº': 'v', '‚óÑ': '<', '‚ñ∫': '>',
            '‚àô': '*', '‚àò': 'o', '‚ãÖ': '*', '‚ãÜ': '*', '‚ãÑ': 'diamond',
            
            # –†–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã
            '‚Ö†': 'I', '‚Ö°': 'II', '‚Ö¢': 'III', '‚Ö£': 'IV', '‚Ö§': 'V',
            '‚Ö•': 'VI', '‚Ö¶': 'VII', '‚Öß': 'VIII', '‚Ö®': 'IX', '‚Ö©': 'X',
            '‚Ö∞': 'i', '‚Ö±': 'ii', '‚Ö≤': 'iii', '‚Ö≥': 'iv', '‚Ö¥': 'v',
            '‚Öµ': 'vi', '‚Ö∂': 'vii', '‚Ö∑': 'viii', '‚Ö∏': 'ix', '‚Öπ': 'x',
        }
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã
        for suspicious, normal in similar_replacements.items():
            if suspicious in text:
                count = text.count(suspicious)
                text = text.replace(suspicious, normal)
                replacements_count += count
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤–∏–¥—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
        space_chars = [
            '\u00a0',  # Non-breaking space
            '\u2000',  # En quad
            '\u2001',  # Em quad
            '\u2002',  # En space
            '\u2003',  # Em space
            '\u2004',  # Three-per-em space
            '\u2005',  # Four-per-em space
            '\u2006',  # Six-per-em space
            '\u2007',  # Figure space
            '\u2008',  # Punctuation space
            '\u2009',  # Thin space
            '\u200a',  # Hair space
            '\u202f',  # Narrow no-break space
            '\u205f',  # Medium mathematical space
            '\u3000',  # Ideographic space
        ]
        
        for space_char in space_chars:
            if space_char in text:
                count = text.count(space_char)
                text = text.replace(space_char, ' ')
                replacements_count += count
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        invisible_chars = [
            '\u200b',  # Zero width space
            '\u200c',  # Zero width non-joiner
            '\u200d',  # Zero width joiner
            '\u2060',  # Word joiner
            '\ufeff',  # Byte order mark
            '\u00ad',  # Soft hyphen
            '\u034f',  # Combining grapheme joiner
            '\u061c',  # Arabic letter mark
            '\u115f',  # Hangul choseong filler
            '\u1160',  # Hangul jungseong filler
            '\u17b4',  # Khmer vowel inherent AQ
            '\u17b5',  # Khmer vowel inherent AA
            '\u180e',  # Mongolian vowel separator
            '\u2028',  # Line separator
            '\u2029',  # Paragraph separator
            '\u202a',  # Left-to-right embedding
            '\u202b',  # Right-to-left embedding
            '\u202c',  # Pop directional formatting
            '\u202d',  # Left-to-right override
            '\u202e',  # Right-to-left override
            '\u2061',  # Function application
            '\u2062',  # Invisible times
            '\u2063',  # Invisible separator
            '\u2064',  # Invisible plus
            '\u206a',  # Inhibit symmetric swapping
            '\u206b',  # Activate symmetric swapping
            '\u206c',  # Inhibit arabic form shaping
            '\u206d',  # Activate arabic form shaping
            '\u206e',  # National digit shapes
            '\u206f',  # Nominal digit shapes
            '\uffa0',  # Halfwidth hangul filler
        ]
        
        for invisible_char in invisible_chars:
            if invisible_char in text:
                count = text.count(invisible_char)
                text = text.replace(invisible_char, '')
                replacements_count += count
        
        # –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        other_problematic = {
            '\u00a1': '!',     # Inverted exclamation mark
            '\u00bf': '?',     # Inverted question mark
            '\u00b0': 'deg',   # Degree symbol
            '\u00b1': '+/-',   # Plus-minus sign
            '\u00b2': '2',     # Superscript two
            '\u00b3': '3',     # Superscript three
            '\u00b5': 'u',     # Micro sign
            '\u00b6': 'P',     # Pilcrow sign
            '\u00b7': '*',     # Middle dot
            '\u00b8': ',',     # Cedilla
            '\u00b9': '1',     # Superscript one
            '\u00ba': 'o',     # Masculine ordinal indicator
            '\u00bb': '>>',    # Right-pointing double angle quotation mark
            '\u00bc': '1/4',   # Vulgar fraction one quarter
            '\u00bd': '1/2',   # Vulgar fraction one half
            '\u00be': '3/4',   # Vulgar fraction three quarters
        }
        
        for problematic, replacement in other_problematic.items():
            if problematic in text:
                count = text.count(problematic)
                text = text.replace(problematic, replacement)
                replacements_count += count
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
        text = re.sub(r' +', ' ', text)
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
        lines = text.split('\n')
        text = '\n'.join(line.strip() for line in lines)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if text != original_text:
            self.text_widget.delete("1.0", tk.END)
            self.text_widget.insert("1.0", text)
            self.status_var.set(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {replacements_count}")
            if self.auto_highlight.get():
                self.root.after(100, self.highlight_all)
        else:
            self.status_var.set("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def show_about(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """–ë–ª–æ–∫–Ω–æ—Ç —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        
–í–µ—Ä—Å–∏—è: 1.0

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ, 
–∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ ChatGPT –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–µ–≤–∏–¥–∏–º—ã—Ö –∏ –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏

–ê–≤—Ç–æ—Ä: –õ–∏—Ç–≤–∏–Ω–æ–≤ –í–∏—Ç–∞–ª–∏–π
Email: murkir@gmail.com

¬© 2025 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã"""

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"
        about_window = tk.Toplevel(self.root)
        about_window.title("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_window.geometry("450x350")
        about_window.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        about_window.transient(self.root)
        about_window.grab_set()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(about_window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame, 
            text="–ë–ª–æ–∫–Ω–æ—Ç —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤",
            font=("Arial", 14, "bold")
        )
        title_label.pack(pady=(0, 10))
        
        # –¢–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_text = tk.Text(
            main_frame,
            wrap=tk.WORD,
            font=("Arial", 10),
            height=12,
            width=50,
            relief="flat",
            bg=about_window.cget("bg"),
            state=tk.DISABLED
        )
        info_text.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        info_text.config(state=tk.NORMAL)
        info_text.insert("1.0", about_text)
        info_text.config(state=tk.DISABLED)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = ttk.Button(
            main_frame,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=about_window.destroy
        )
        close_button.pack()
        
        # –§–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É
        close_button.focus()
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()
    
    def cut_text(self):
        """–í—ã—Ä–µ–∑–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            if self.text_widget.selection_get():
                self.text_widget.event_generate('<<Cut>>')
        except tk.TclError:
            pass  # –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    
    def copy_text(self):
        """–ö–æ–ø–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            if self.text_widget.selection_get():
                self.text_widget.event_generate('<<Copy>>')
        except tk.TclError:
            pass  # –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    
    def paste_text(self):
        """–í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            self.text_widget.event_generate('<<Paste>>')
            if self.auto_highlight.get():
                self.root.after(100, self.highlight_all)
        except tk.TclError:
            pass
    
    def select_all_text(self):
        """–í—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç"""
        self.text_widget.tag_add(tk.SEL, "1.0", tk.END)
        self.text_widget.mark_set(tk.INSERT, "1.0")
        self.text_widget.see(tk.INSERT)
    
    def analyze_selection(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            selected_text = self.text_widget.selection_get()
            if not selected_text:
                messagebox.showinfo("–ê–Ω–∞–ª–∏–∑", "–¢–µ–∫—Å—Ç –Ω–µ –≤—ã–¥–µ–ª–µ–Ω")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã
            total_chars = len(selected_text)
            non_standard_chars = []
            invisible_chars = []
            special_spaces = []
            similar_chars = []
            
            for i, char in enumerate(selected_text):
                if char not in self.standard_chars and char != '\n':
                    char_info = f"'{char}' (U+{ord(char):04X})"
                    non_standard_chars.append(char_info)
                    
                    if self.is_invisible_char(char):
                        invisible_chars.append(char_info)
                    elif self.is_special_space(char):
                        special_spaces.append(char_info)
                    elif self.is_similar_char(char):
                        similar_chars.append(char_info)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"–ê–Ω–∞–ª–∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n\n"
            report += f"–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_chars}\n"
            report += f"–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(non_standard_chars)}\n\n"
            
            if invisible_chars:
                report += f"–ù–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã ({len(invisible_chars)}):\n"
                for char in invisible_chars[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                    report += f"  ‚Ä¢ {char}\n"
                if len(invisible_chars) > 10:
                    report += f"  ... –∏ –µ—â–µ {len(invisible_chars) - 10}\n"
                report += "\n"
            
            if special_spaces:
                report += f"–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã ({len(special_spaces)}):\n"
                for char in special_spaces[:10]:
                    report += f"  ‚Ä¢ {char}\n"
                if len(special_spaces) > 10:
                    report += f"  ... –∏ –µ—â–µ {len(special_spaces) - 10}\n"
                report += "\n"
            
            if similar_chars:
                report += f"–ü–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã ({len(similar_chars)}):\n"
                for char in similar_chars[:10]:
                    report += f"  ‚Ä¢ {char}\n"
                if len(similar_chars) > 10:
                    report += f"  ... –∏ –µ—â–µ {len(similar_chars) - 10}\n"
                report += "\n"
            
            if not non_standard_chars:
                report += "‚úÖ –í—Å–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ!"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ
            analysis_window = tk.Toplevel(self.root)
            analysis_window.title("–ê–Ω–∞–ª–∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            analysis_window.geometry("500x400")
            
            text_area = scrolledtext.ScrolledText(analysis_window, wrap=tk.WORD, font=("Consolas", 10))
            text_area.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            text_area.insert("1.0", report)
            text_area.config(state=tk.DISABLED)
            
        except tk.TclError:
            messagebox.showinfo("–ê–Ω–∞–ª–∏–∑", "–¢–µ–∫—Å—Ç –Ω–µ –≤—ã–¥–µ–ª–µ–Ω")
    
    def fix_selection(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            selected_text = self.text_widget.selection_get()
            if not selected_text:
                messagebox.showinfo("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–¢–µ–∫—Å—Ç –Ω–µ –≤—ã–¥–µ–ª–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—ã–¥–µ–ª–µ–Ω–∏—è
            sel_start = self.text_widget.index(tk.SEL_FIRST)
            sel_end = self.text_widget.index(tk.SEL_LAST)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
            fixed_text = self.fix_text(selected_text)
            
            if fixed_text != selected_text:
                # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
                self.text_widget.delete(sel_start, sel_end)
                self.text_widget.insert(sel_start, fixed_text)
                
                # –í—ã–¥–µ–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                new_end = f"{sel_start}+{len(fixed_text)}c"
                self.text_widget.tag_add(tk.SEL, sel_start, new_end)
                
                self.status_var.set("–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
                if self.auto_highlight.get():
                    self.root.after(100, self.highlight_all)
            else:
                self.status_var.set("–í –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
                
        except tk.TclError:
            messagebox.showinfo("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–¢–µ–∫—Å—Ç –Ω–µ –≤—ã–¥–µ–ª–µ–Ω")
    
    def fix_text(self, text):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        original_text = text
        
        # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        similar_replacements = {
            '–∞': 'a', '–µ': 'e', '–æ': 'o', '—Ä': 'p', '—Å': 'c', '—É': 'y', '—Ö': 'x',
            '–ê': 'A', '–í': 'B', '–ï': 'E', '–ö': 'K', '–ú': 'M', '–ù': 'H', '–û': 'O', 
            '–†': 'P', '–°': 'C', '–¢': 'T', '–£': 'Y', '–•': 'X',
            '"': '"', '"': '"', ''': "'", ''': "'",
            '‚Äî': '-', '‚Äì': '-', '‚àí': '-',
            '‚Ä¶': '...', '‚Ññ': 'No.', '¬ß': 'S',
            '¬©': '(c)', '¬Æ': '(r)', '‚Ñ¢': '(tm)',
            '¬∞': 'deg', '¬±': '+/-', '√ó': 'x', '√∑': '/',
            '¬Ω': '1/2', '‚Öì': '1/3', '¬º': '1/4', '¬æ': '3/4',
            '‚Üí': '->', '‚Üê': '<-', '‚Üë': '^', '‚Üì': 'v',
            '‚â§': '<=', '‚â•': '>=', '‚â†': '!=', '‚âà': '~=',
            'Œ±': 'alpha', 'Œ≤': 'beta', 'Œ≥': 'gamma', 'œÄ': 'pi',
            '‚Ç¨': 'EUR', '¬£': 'GBP', '¬•': 'JPY', '¬¢': 'cent',
            '‚òÖ': '*', '‚òÜ': '*', '‚Ä¢': '*', '‚ñ™': '*', '‚àô': '*',
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
        for suspicious, normal in similar_replacements.items():
            text = text.replace(suspicious, normal)
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        space_chars = ['\u00a0', '\u2009', '\u202f', '\u2000', '\u2001', '\u2002', '\u2003']
        for space_char in space_chars:
            text = text.replace(space_char, ' ')
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        invisible_chars = ['\u200b', '\u200c', '\u200d', '\ufeff', '\u00ad']
        for invisible_char in invisible_chars:
            text = text.replace(invisible_char, '')
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r' +', ' ', text)
        
        return text
    
    def is_invisible_char(self, char):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ–≤–∏–¥–∏–º—ã–º"""
        invisible_chars = {
            '\u200b',  # Zero width space
            '\u200c',  # Zero width non-joiner
            '\u200d',  # Zero width joiner
            '\u2060',  # Word joiner
            '\ufeff',  # Byte order mark
            '\u00ad',  # Soft hyphen
        }
        return char in invisible_chars or unicodedata.category(char) in ['Cf', 'Mn']
    
    def is_special_space(self, char):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ–±–µ–ª–æ–º"""
        special_spaces = {
            '\u00a0',  # Non-breaking space
            '\u2000',  # En quad
            '\u2001',  # Em quad
            '\u2002',  # En space
            '\u2003',  # Em space
            '\u2004',  # Three-per-em space
            '\u2005',  # Four-per-em space
            '\u2006',  # Six-per-em space
            '\u2007',  # Figure space
            '\u2008',  # Punctuation space
            '\u2009',  # Thin space
            '\u200a',  # Hair space
            '\u202f',  # Narrow no-break space
            '\u205f',  # Medium mathematical space
            '\u3000',  # Ideographic space
        }
        return char in special_spaces
    
    def is_similar_char(self, char):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –ø–æ—Ö–æ–∂–∏–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"""
        # –°–∏–º–≤–æ–ª—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã
        similar_chars = {
            '–∞': 'a', '–µ': 'e', '–æ': 'o', '—Ä': 'p', '—Å': 'c', '—É': 'y', '—Ö': 'x',
            '–ê': 'A', '–í': 'B', '–ï': 'E', '–ö': 'K', '–ú': 'M', '–ù': 'H', '–û': 'O', 
            '–†': 'P', '–°': 'C', '–¢': 'T', '–£': 'Y', '–•': 'X'
        }
        return char in similar_chars
    
    def new_file(self):
        """–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª"""
        if messagebox.askokcancel("–ù–æ–≤—ã–π —Ñ–∞–π–ª", "–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç?"):
            self.text_widget.delete("1.0", tk.END)
            self.clear_highlights()
            self.status_var.set("–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
    
    def open_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª"""
        filename = filedialog.askopenfilename(
            title="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª",
            filetypes=[
                ("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as file:
                    content = file.read()
                    self.text_widget.delete("1.0", tk.END)
                    self.text_widget.insert("1.0", content)
                    self.status_var.set(f"–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {filename}")
                    if self.auto_highlight.get():
                        self.highlight_all()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
    
    def save_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª"""
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª",
            defaultextension=".txt",
            filetypes=[
                ("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if filename:
            try:
                content = self.text_widget.get("1.0", tk.END)
                with open(filename, 'w', encoding='utf-8') as file:
                    file.write(content)
                self.status_var.set(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")

def main():
    root = tk.Tk()
    app = NonStandardCharHighlighter(root)
    root.mainloop()

if __name__ == "__main__":
    main()